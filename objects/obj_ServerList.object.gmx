<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.server_instance = -1;
global.connect_ip = "127.0.0.1";
global.server_list_instance = id;
global.have_server = false;
global.server_type = network_socket_tcp;

//global.list_zero = ds_list_create();// we dont want to use index 0! (maps return 0 on error)
//global.map_zero = ds_map_create();// we dont want to use index 0! (maps return 0 on error)
global.server_list = ds_list_create();
global.server_names = ds_list_create();

// Cria um servidor para receber o broadcast dos servidores ativos
global.broadcast_server = network_create_server(network_socket_udp, 6511, 100);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vai para o Game Set - usando um servidor/cliente local
global.server_instance = instance_create(32, 0, obj_Server);
if (!global.have_server){
    show_debug_message("Impossível criar servidor!");
} else{
    global.connect_ip = "127.0.0.1"; //Conecta-se a si mesmo
    network_destroy(global.broadcast_server);
    global.broadcast_server = -1;
    show_debug_message("#######################################");
    show_debug_message("Game Set");
    show_debug_message("#######################################");
    room_goto(rm_GameSet);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vai para o Game Set - conecta a um servidor remoto
network_destroy(global.broadcast_server);
global.broadcast_server = -1;

show_debug_message("#######################################");
show_debug_message("Game Set");
show_debug_message("#######################################");
room_goto(rm_GameSet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detecta cliques sobre a lista de servidores

var yy = 64;
var count = ds_list_size(global.server_list);
if (mouse_y &gt; 2 * yy &amp;&amp; mouse_y &lt; (yy * (count + 2))){
    var picked = floor(((mouse_y - 2 * yy) / 64));
    global.connect_ip = ds_list_find_value(global.server_list, picked);
    alarm[0] = 1;//para se conectar a um servidor existente
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Servidor UDP - Detecta o broadcast dos servidores disponíveis
var event_id = ds_map_find_value(async_load, "id");

if(event_id == global.broadcast_server){
    var ip = ds_map_find_value(async_load, "ip");
    // entrada de dados para o servidor de um socket conectado
    var buffer = ds_map_find_value(async_load, "buffer");
    var name = buffer_read(buffer, buffer_string );        
    // Adiciona o servidor a lista caso ele já não esteja nela
    var index = ds_list_find_index(global.server_list, ip);
    if(index &lt; 0){
        ds_list_add(global.server_list, ip);
        ds_list_add(global.server_names, name);
        show_debug_message("Novo servidor encontrado: " + ip + " --&gt; nome: " + name);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exibe a lista de servidores
var yy = 64;
var count = ds_list_size(global.server_list);
draw_set_font(fnt_Menu);
draw_set_color(c_black);
draw_set_alpha(0.5);
draw_rectangle(16, 0, yy * 18, room_height, false);
draw_set_alpha(1);
draw_set_color(c_white);
draw_text(32,32,"Servidores disponiveis:");

for(var i = 0; i &lt; count; i++){
    draw_text(32, yy * (i + 2), ds_list_find_value(global.server_list, i) + "  "
                + ds_list_find_value(global.server_names, i));
}

draw_set_color(c_black);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
